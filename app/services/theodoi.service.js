const { ObjectId } = require('mongodb');
const Sach = require('../services/sach.service.js');

class TheodoiService {
    constructor(client) {
        this.Theodoi = client.db().collection('THEODOIMUONSACH');
        this.Docgia = client.db().collection('DOCGIA');
        this.Sach = client.db().collection('SACH');
    }

    async extractTheodoiData(payload) {
        const theodoi = {
            _id: payload._id,
            MADOCGIA: payload.MADOCGIA,
            MASACH: payload.MASACH,
            NGAYMUON: payload.NGAYMUON,
            NGAYTRA: payload.NGAYTRA,
            trangThai: payload.trangThai,
            SOQUYEN: payload.SOQUYEN,
        };
        Object.keys(theodoi).forEach(
            (key) => theodoi[key] === undefined && delete theodoi[key]
        );
        return theodoi;
    }

    async create(payload) {
        const docGia = await this.Docgia.findOne({ MADOCGIA: payload.MADOCGIA });
        if (!docGia) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£ v·ªõi m√£ ${payload.MADOCGIA}`);
        }

        const sach = await this.Sach.findOne({ MASACH: payload.MASACH });
        if (!sach) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi m√£ ${payload.MASACH}`);
        }

        if (sach.SOQUYEN < payload.SOQUYEN) {
            throw new Error(`S·ªë l∆∞·ª£ng s√°ch kh√¥ng ƒë·ªß. Hi·ªán t·∫°i ch·ªâ c√≤n ${sach.SOQUYEN} quy·ªÉn.`);
        }

        await this.Sach.updateOne(
            { MASACH: payload.MASACH },
            { $inc: { SOQUYEN: -payload.SOQUYEN } }
        );

        const theodoi = await this.extractTheodoiData(payload);
        const result = await this.Theodoi.insertOne(theodoi);

        return await this.Theodoi.findOne({ _id: result.insertedId });
    }

    async find(filter) {
        return await this.Theodoi.find(filter).toArray();
    }

    async findById(id) {
        return await this.Theodoi.findOne({ _id: new ObjectId(id) });
    }

    async update(id, payload) {
        const update = this.extractTheodoiData(payload);
        const result = await this.Theodoi.findOneAndUpdate(
            { _id: new ObjectId(id) },
            { $set: update },
            { returnDocument: 'after' }
        );
        return result?.value ? true : false;
    }

    async delete(id) {
        const result = await this.Theodoi.findOneAndDelete({ _id: new ObjectId(id) });
        return result;
    }

    async deleteAll() {
        const result = await this.Theodoi.deleteMany({});
        return result.deletedCount;
    }

    async dangKyMuonSach(docGiaID, MASACH, SOQUYEN, NGAYMUON) {
        if (!docGiaID || !MASACH || !SOQUYEN || !NGAYMUON) {
            throw new Error('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.');
        }

        const _id = new ObjectId(docGiaID);

        // üîπ 1Ô∏è‚É£ Ki·ªÉm tra ƒë·ªôc gi·∫£ c√≥ t·ªìn t·∫°i kh√¥ng
        const docGia = await this.Docgia.findOne({ _id });
        if (!docGia) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y ƒë·ªôc gi·∫£ v·ªõi m√£: ${_id}`);
        }

        // üîπ 2Ô∏è‚É£ Ki·ªÉm tra s√°ch c√≥ t·ªìn t·∫°i kh√¥ng
        const sach = await this.Sach.findOne({ MASACH });
        if (!sach) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi m√£: ${MASACH}`);
        }

        // üîπ 3Ô∏è‚É£ Ki·ªÉm tra ƒë·ªß s·ªë l∆∞·ª£ng s√°ch kh√¥ng
        if (sach.SOQUYEN < SOQUYEN) {
            throw new Error(`S√°ch ${sach.TENSACH} ch·ªâ c√≤n ${sach.SOQUYEN} quy·ªÉn, kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng y√™u c·∫ßu`);
        }

        // üîπ 4Ô∏è‚É£ ƒê·∫øm t·ªïng s·ªë s√°ch ƒë·ªôc gi·∫£ n√†y ƒëang m∆∞·ª£n (ch∆∞a tr·∫£)
        const sachDangMuon = await this.Theodoi.find({
            MADOCGIA: docGiaID,
            trangThai: { $in: ['ƒêang m∆∞·ª£n', 'Ch·ªù duy·ªát'] } // t√πy h·ªá th·ªëng c·ªßa b·∫°n
        }).toArray();

        const tongSoSachDangMuon = sachDangMuon.reduce((sum, item) => sum + (item.SOQUYEN || 0), 0);

        // üîπ 5Ô∏è‚É£ N·∫øu t·ªïng s·ªë v∆∞·ª£t qu√° 5, kh√¥ng cho m∆∞·ª£n
        if (tongSoSachDangMuon + SOQUYEN > 5) {
            throw new Error(`M·ªói ƒë·ªôc gi·∫£ ch·ªâ ƒë∆∞·ª£c m∆∞·ª£n t·ªëi ƒëa 5 quy·ªÉn. Hi·ªán t·∫°i b·∫°n ƒë√£ m∆∞·ª£n ${tongSoSachDangMuon} quy·ªÉn.`);
        }

        // üîπ 6Ô∏è‚É£ N·∫øu h·ª£p l·ªá th√¨ t·∫°o phi·∫øu m∆∞·ª£n
        const theodoi = await this.extractTheodoiData({
            MADOCGIA: docGiaID,
            MASACH,
            SOQUYEN,
            NGAYMUON,
            trangThai: 'Ch·ªù duy·ªát'
        });

        await this.Theodoi.insertOne(theodoi);

        return {
            message: 'ƒêƒÉng k√Ω m∆∞·ª£n s√°ch th√†nh c√¥ng, vui l√≤ng ch·ªù duy·ªát',
            theodoi
        };
    }

    async duyetMuonSach(id) {
        const muonSach = await this.findById(id);
        if (!muonSach) {
            throw new Error('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu m∆∞·ª£n s√°ch');
        }
        if (muonSach.trangThai !== 'Ch·ªù duy·ªát') {
            throw new Error('Y√™u c·∫ßu n√†y kh√¥ng th·ªÉ duy·ªát');
        }

        const sach = await this.Sach.findOne({ MASACH: muonSach.MASACH });
        if (!sach || sach.SOQUYEN < muonSach.SOQUYEN) {
            throw new Error(`S√°ch kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng ƒë·ªÉ duy·ªát`);
        }

        await this.Sach.updateOne(
            { MASACH: muonSach.MASACH },
            { $inc: { SOQUYEN: -muonSach.SOQUYEN } }
        );

        await this.Theodoi.updateOne(
            { _id: new ObjectId(id) },
            { $set: { trangThai: 'ƒêang m∆∞·ª£n' } }
        );

        return { message: 'ƒê√£ duy·ªát y√™u c·∫ßu m∆∞·ª£n s√°ch', muonSach };
    }

    async xacNhanTraSach(id) {
        const muonSach = await this.findById(id);
        if (!muonSach) throw new Error('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu m∆∞·ª£n s√°ch');
        
        if (muonSach.trangThai !== 'ƒêang m∆∞·ª£n') throw new Error('Ch·ªâ c√≥ th·ªÉ x√°c nh·∫≠n tr·∫£ s√°ch khi ƒëang trong tr·∫°ng th√°i ƒêang m∆∞·ª£n');
        
        await this.Sach.updateOne(
            { MASACH: muonSach.MASACH },
            { $inc: { SOQUYEN: muonSach.SOQUYEN } }
        );

        await this.Theodoi.updateOne(
            { _id: new ObjectId(id) },
            { $set: { trangThai: 'ƒê√£ tr·∫£', NGAYTRA: new Date() } }
        );

        return { message: 'X√°c nh·∫≠n tr·∫£ s√°ch th√†nh c√¥ng', muonSach };
    }

    async baoMatSach(id, lyDo) {
        const muonSach = await this.findById(id);
        if (!muonSach) throw new Error('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu m∆∞·ª£n s√°ch');

        if (muonSach.trangThai !== 'ƒêang m∆∞·ª£n') {
            throw new Error('Ch·ªâ c√≥ th·ªÉ b√°o m·∫•t s√°ch khi tr·∫°ng th√°i l√† "ƒêang m∆∞·ª£n"');
        }

        const sach = await this.Sach.findOne({ MASACH: muonSach.MASACH });
        if (!sach) throw new Error(`Kh√¥ng t√¨m th·∫•y th√¥ng tin s√°ch v·ªõi m√£ ${muonSach.MASACH}`);

        const tienBoiThuong = sach.DONGIA * muonSach.SOQUYEN;

        // Tru sach khoi kho sach
        await this.Sach.updateOne(
            { MASACH: muonSach.MASACH },
            { $inc: { SOQUYEN: -muonSach.SOQUYEN } }
        );

        // C·∫≠p nh·∫≠t th√¥ng tin trong THEODOIMUONSACH
        await this.Theodoi.updateOne(
            { _id: new ObjectId(id) },
            {
            $set: {
                trangThai: 'M·∫•t s√°ch',
                TIENBOITHUONG: tienBoiThuong,
                NGAYTRA: new Date(),
                GHI_CHU: lyDo || ''
            }
            }
        );

        return {
            message: `B√°o m·∫•t s√°ch th√†nh c√¥ng. ƒê·ªôc gi·∫£ ph·∫£i b·ªìi th∆∞·ªùng ${tienBoiThuong.toLocaleString()} VNƒê.`,
            sach: sach.TENSACH,
            tienBoiThuong
        };
    } 
}

module.exports = TheodoiService;
