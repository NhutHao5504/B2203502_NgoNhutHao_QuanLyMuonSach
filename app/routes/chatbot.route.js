const express = require("express");
const router = express.Router();
const { GoogleGenerativeAI } = require("@google/generative-ai");
require("dotenv").config();

const MongoDB = require("../utils/mongodb.util");
const SachService = require("../services/sach.service");
const TheodoiService = require("../services/theodoi.service");

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// L∆∞u l·ªãch s·ª≠ chat c·ªßa user
const chatHistories = {};

router.post("/", async (req, res) => {
//  console.log("Nh·∫≠n t·ª´ FE:", req.body);
  try {
    const { message, docGiaId, docGiaMongoId } = req.body;

    if (!message || message.trim() === "") {
      return res.json({
        reply: `üëã Xin ch√†o! M√¨nh l√† chatbot th∆∞ vi·ªán
        B·∫°n c√≥ th·ªÉ h·ªèi m√¨nh v·ªÅ:
        ‚Ä¢ Th√¥ng tin t·∫•t c·∫£ s√°ch trong th∆∞ vi·ªán  
        ‚Ä¢ Th√¥ng tin c·ª• th·ªÉ c·ªßa m·ªôt quy·ªÉn s√°ch  
        ‚Ä¢ S√°ch b·∫°n ƒëang m∆∞·ª£n v√† h·∫°n tr·∫£  
        ‚Ä¢ Quy ƒë·ªãnh th∆∞ vi·ªán v√† gi·ªù m·ªü c·ª≠a  
        ‚Ä¢ V√† nhi·ªÅu h∆°n n·ªØa!

        V√≠ d·ª•: "T√¥i ƒëang m∆∞·ª£n s√°ch n√†o?" ho·∫∑c "Th√¥ng tin s√°ch L·∫≠p tr√¨nh C++"`,
      });
    }


    if (!message) return res.status(400).json({ error: "Thi·∫øu message!" });

    const sachService = new SachService(MongoDB.client);
    const theodoiService = new TheodoiService(MongoDB.client);

    if (!chatHistories[docGiaId]) chatHistories[docGiaId] = [];
    chatHistories[docGiaId].push({ role: "user", text: message });

    const lower = message.toLowerCase();
    let context = "";

    //Xem t·∫•t c·∫£ s√°ch c√≥ trong th∆∞ vi·ªán ho·∫∑c c·ª• th·ªÉ
    if (lower.includes("s√°ch")) {
      const allBooks = await sachService.find({});
      const { search } = require("googlethis");

      let keyword = lower
        .replace("th√¥ng tin", "")
        .replace("v·ªÅ", "")
        .replace("cu·ªën", "")
        .replace("s√°ch", "")
        .trim();

      //N·∫øu ng∆∞·ªùi d√πng h·ªèi "t·∫•t c·∫£ s√°ch"
      if (keyword === "" || keyword === "t·∫•t c·∫£") {
        if (allBooks.length > 0) {
          context = `
            <div style="font-family: Arial, sans-serif; color: #333;">
              <h3 style="color: #007bff;">Danh s√°ch t·∫•t c·∫£ s√°ch trong th∆∞ vi·ªán</h3>
              ${allBooks
                .map(
                  (s) => `
                    <div style="border: 1px solid #ddd; border-radius: 10px; padding: 10px; margin-bottom: 10px; background-color: #f8f9fa; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
                      <strong>${s.TENSACH}</strong><br>
                      <b>T√°c gi·∫£:</b> ${s.TACGIA}<br>
                    </div>
                  `
                )
                .join("")}
              <p style="margin-top:15px;">B·∫°n mu·ªën xem chi ti·∫øt ho·∫∑c t√≥m t·∫Øt v·ªÅ cu·ªën n√†o kh√¥ng? G√µ v√≠ d·ª•: <b>"th√¥ng tin s√°ch ƒê·∫Øc Nh√¢n T√¢m"</b> ho·∫∑c <b>"t√≥m t·∫Øt s√°ch ƒê·∫Øc Nh√¢n T√¢m"</b>.</p>
            </div>
          `.replace(/\s\s+/g, " ");
        } else {
          context = "<p>Hi·ªán ch∆∞a c√≥ s√°ch n√†o trong h·ªá th·ªëng.</p>";
        }
      }

      //N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ 1 cu·ªën c·ª• th·ªÉ
      else {
        const matched = allBooks.filter(
          (s) =>
            s.TENSACH.toLowerCase().includes(keyword) ||
            s.TACGIA.toLowerCase().includes(keyword)
        );

        if (matched.length > 0) {
          const s = matched[0];
          context = `
            <div style="font-family: Arial, sans-serif; color: #333;">
              <h3 style="color: #007bff;">Th√¥ng tin chi ti·∫øt v·ªÅ s√°ch "${s.TENSACH}"</h3>
              <div style="border: 1px solid #ddd; border-radius: 10px; padding: 10px; margin-bottom: 10px; background-color: #f8f9fa; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
                <strong>${s.TENSACH}</strong><br>
                <b>T√°c gi·∫£:</b> ${s.TACGIA}<br>
                <b>NƒÉm xu·∫•t b·∫£n:</b> ${s.NAMXUATBAN}<br>
                <b>S·ªë l∆∞·ª£ng c√≤n l·∫°i:</b> ${s.SOQUYEN} quy·ªÉn<br>
                <b>Gi√°:</b> ${s.DONGIA.toLocaleString()}ƒë
              </div>
              <p>B·∫°n c√≥ mu·ªën m√¨nh t√≥m t·∫Øt n·ªôi dung cu·ªën s√°ch n√†y kh√¥ng?</p>
            </div>
          `.replace(/\s\s+/g, " ");
        } else {
          context = `<p>Kh√¥ng t√¨m th·∫•y s√°ch n√†o c√≥ t√™n ho·∫∑c t√°c gi·∫£ li√™n quan ƒë·∫øn "${keyword}".</p>`;
        }
      }
    }

    //T√≥m t·∫Øt n·ªôi dung s√°ch (AI + tra web)
    else if (lower.includes("t√≥m t·∫Øt") || lower.includes("n·ªôi dung s√°ch")) {
      const { search } = require("googlethis");
      const name = lower
        .replace("t√≥m t·∫Øt", "")
        .replace("n·ªôi dung s√°ch", "")
        .replace("v·ªÅ", "")
        .trim();

      const results = await search(`T√≥m t·∫Øt n·ªôi dung s√°ch ${name}`);

      if (results && results.results.length > 0) {
        const snippet = results.results[0].description;
        const url = results.results[0].url;
        context = `
          <div style="font-family: Arial, sans-serif; color: #333;">
            <h3 style="color:#28a745;">T√≥m t·∫Øt s∆° l∆∞·ª£c v·ªÅ "${name}"</h3>
            <p>${snippet}</p>
            <p style="margin-top:10px;">Ngu·ªìn tham kh·∫£o: <a href="${url}" target="_blank">${url}</a></p>
          </div>
        `;
      } else {
        context = `<p>M√¨nh kh√¥ng t√¨m th·∫•y th√¥ng tin t√≥m t·∫Øt v·ªÅ "${name}".</p>`;
      }
    }

    //Xem s√°ch ƒëang m∆∞·ª£n (k√®m ng√†y m∆∞·ª£n v√† h·∫°n tr·∫£)
    else if (
      lower.includes("ƒëang m∆∞·ª£n") ||
      lower.includes("phi·∫øu m∆∞·ª£n") ||
      lower.includes("t√¥i ƒëang m∆∞·ª£n s√°ch n√†o") ||
      lower.includes("ƒëang gi·ªØ s√°ch")
    ) {
      //L·∫•y ID ƒë·ªôc gi·∫£
      const id = String(docGiaId || docGiaMongoId || "").trim();
      console.log("Ki·ªÉm tra ID:", id);

      if (!id) {
        context = "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem s√°ch ƒëang m∆∞·ª£n.";
      } else {
        //T√¨m c√°c phi·∫øu m∆∞·ª£n c·ªßa ƒë·ªôc gi·∫£
        const muonList = await theodoiService.find({
          $or: [
            { MADOCGIA: id },
            { MADOCGIA: docGiaId },
            { MADOCGIA: docGiaMongoId },
          ],
        });

        console.log("T·ªïng phi·∫øu m∆∞·ª£n t√¨m th·∫•y:", muonList.length);

        //Ch·ªâ l·∫•y nh·ªØng phi·∫øu ƒëang m∆∞·ª£n
        const sachDangMuon = muonList.filter(
          (m) =>
            (!m.trangThai && !m.NGAYTRA) || // ch∆∞a c√≥ tr·∫°ng th√°i v√† ch∆∞a c√≥ ng√†y tr·∫£
            (m.trangThai &&
              !["ƒê√£ tr·∫£", "M·∫•t s√°ch"].includes(
                m.trangThai.trim()
              ))
        );

        console.log("Phi·∫øu ƒëang m∆∞·ª£n (ch∆∞a tr·∫£):", sachDangMuon.length);

        if (!sachDangMuon.length) {
          context = "Hi·ªán b·∫°n ch∆∞a m∆∞·ª£n quy·ªÉn s√°ch n√†o.";
        } else {
          const allBooks = await sachService.find({});

          const lines = sachDangMuon.map((m) => {
            const sach = allBooks.find(
              (s) => s.MASACH === m.MASACH || String(s._id) === String(m.MASACH)
            );
            const tenSach = sach?.TENSACH || "Kh√¥ng r√µ t√™n s√°ch";

            // T√≠nh ng√†y m∆∞·ª£n v√† h·∫°n tr·∫£ (14 ng√†y sau)
            const ngayMuon = m.NGAYMUON ? new Date(m.NGAYMUON) : null;
            let ngayMuonStr = "kh√¥ng r√µ";
            let hanTraStr = "ch∆∞a x√°c ƒë·ªãnh";

            if (ngayMuon && !isNaN(ngayMuon)) {
              const hanTra = new Date(ngayMuon);
              hanTra.setDate(ngayMuon.getDate() + 14);
              ngayMuonStr = ngayMuon.toLocaleDateString("vi-VN");
              hanTraStr = hanTra.toLocaleDateString("vi-VN");
            }

            return `${tenSach} ‚Äî m∆∞·ª£n ng√†y ${ngayMuonStr}, h·∫°n tr·∫£ ${hanTraStr}`;
          });

          context = `üìò C√°c s√°ch b·∫°n ƒëang m∆∞·ª£n:\n${lines.join("\n")}`;
        }
      }
    }
      
    //Quy ƒë·ªãnh th∆∞ vi·ªán
    else if (
      lower.includes("quy ƒë·ªãnh") ||
      lower.includes("m∆∞·ª£n t·ªëi ƒëa") ||
      lower.includes("ph·∫°t") ||
      lower.includes("tr·∫£ mu·ªôn")
    ) {
      const context = `
        <p>üìò <strong>Quy ƒë·ªãnh th∆∞ vi·ªán</strong></p>
        <ul>
          <li><strong>S·ªë l∆∞·ª£ng m∆∞·ª£n:</strong> T·ªëi ƒëa 5 quy·ªÉn</li>
          <li><strong>Th·ªùi gian m∆∞·ª£n:</strong> 14 ng√†y</li>
          <li><strong>Ph·∫°t tr·ªÖ h·∫°n:</strong> 5.000ƒë/quy·ªÉn/ng√†y</li>
          <li><strong>Y√™u c·∫ßu:</strong> Tr·∫£ s√°ch nguy√™n v·∫πn v√† ƒë√∫ng h·∫°n</li>
          <li><strong>M·∫•t s√°ch:</strong> B·ªìi th∆∞·ªùng theo gi√° b√¨a</li>
        </ul>
      `.replace(/\s\s+/g, ' ');
      return res.json({ reply: context });
    }


    //Gi·ªù m·ªü c·ª≠a / li√™n h·ªá
    else if (
      lower.includes("gi·ªù m·ªü c·ª≠a") ||
      lower.includes("li√™n h·ªá") ||
      lower.includes("h∆∞·ªõng d·∫´n") ||
      lower.includes("tr·ª£ gi√∫p")
    ) {
      context = `üïì Gi·ªù m·ªü c·ª≠a th∆∞ vi·ªán:
      - Th·ª© 2 - Th·ª© 6: 7h30 - 17h00
      - Th·ª© 7: 7h30 - 11h30
      - Li√™n h·ªá: Ng√¥ Nh·ª±t H√†o
      - SƒêT: 0865475344`;
    }

    //Reply m·∫∑c ƒë·ªãnh
    else {
      context = `T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
      - Tra c·ª©u s√°ch, t√¨m theo t√™n/t√°c gi·∫£.
      - Ki·ªÉm tra s√°ch b·∫°n ƒëang m∆∞·ª£n, h·∫°n tr·∫£.
      - Xem quy ƒë·ªãnh v√† gi·ªù m·ªü c·ª≠a th∆∞ vi·ªán.`;
    }

    //G·ªçi Gemini ƒë·ªÉ tr·∫£ l·ªùi t·ª± nhi√™n
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
    const chat = model.startChat({
      history: chatHistories[docGiaId].map((msg) => ({
        role: msg.role,
        parts: [{ text: msg.text }],
      })),
    });

    const prompt = `
      D·ªØ li·ªáu th∆∞ vi·ªán:
      ${context}

      Ng∆∞·ªùi d√πng h·ªèi: "${message}"

      H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán, ti·∫øng Vi·ªát, kh√¥ng ti·∫øt l·ªô th√¥ng tin ng∆∞·ªùi kh√°c.
    `;

    const result = await chat.sendMessage(prompt);
    const reply = result.response.text();

    chatHistories[docGiaId].push({ role: "model", text: reply });

    res.json({ reply });
  } catch (error) {
    console.error("L·ªói chatbot:", error);
    res.status(500).json({ error: "Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu!" });
  }
});


module.exports = router;
